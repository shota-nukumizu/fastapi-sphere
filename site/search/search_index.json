{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI Sphere\u3078\u3088\u3046\u3053\u305d","text":""},{"location":"#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>FastAPI Sphere\u3068\u306f\u3001Python\u306eWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afFastAPI\u3068\u69d8\u3005\u306a\u6280\u8853\u3092\u99c6\u4f7f\u3057\u3066\u591a\u7a2e\u591a\u69d8\u306aWeb API\u3092\u958b\u767a\u3059\u308b\u305f\u3081\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30ac\u30a4\u30c9\u3067\u3042\u308b\u3002\u672c\u30ac\u30a4\u30c9\u3092\u901a\u3057\u3066\u3001\u8aad\u8005\u306bFastAPI\u306e\u9b45\u529b\u3068\u9762\u767d\u3055\u3001Web API\u8a2d\u8a08\u306e\u57fa\u790e\u77e5\u8b58\u3092\u8eab\u306b\u3064\u3051\u308b\u3053\u3068\u3092\u6700\u7d42\u76ee\u7684\u3068\u3059\u308b\u3002</p> <p>\u3053\u308c\u304b\u3089\u5b9f\u52d9\u3067FastAPI\u3092\u4f7f\u3063\u3066Web API\u3092\u958b\u767a\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306e\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3042\u308b\u3002</p> <p>\u672c\u30ac\u30a4\u30c9\u306fMIT License\u3067\u516c\u958b\u3059\u308b\u3002\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u3002</p>"},{"location":"#_2","title":"\u5236\u4f5c\u306e\u76ee\u7684","text":"<p>FastAPI Sphere\u306e\u5236\u4f5c\u76ee\u7684\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3002</p> <ul> <li>FastAPI\u3092\u3053\u308c\u304b\u3089\u5b66\u3076\u521d\u5fc3\u8005\u306b\u3001FastAPI\u3067\u3067\u304d\u308b\u3053\u3068\u3092\u7c21\u6f54\u306b\u793a\u3059\u305f\u3081</li> <li>Web API\u306e\u958b\u767a\u3092\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3067\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081</li> <li>Web API\u958b\u767a\u306e\u300c\u306a\u3093\u3068\u306a\u304f\u300d\u3092\u5c11\u3057\u3067\u3082\u6e1b\u3089\u3059\u305f\u3081</li> </ul> <p>\u305f\u3060\u3057\u3001\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3042\u304f\u307e\u3067FastAPI\u306e\u5165\u9580\u8005\u5411\u3051\u306bFastAPI\u3067\u3067\u304d\u308b\u3053\u3068\u3092\u7c21\u6f54\u306b\u66f8\u3044\u3066\u3044\u308b\u3060\u3051\u306b\u904e\u304e\u306a\u3044\u306e\u3067\u3001\u8a73\u7d30\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u78ba\u8a8d\u3057\u3066\u307b\u3057\u3044\u3002</p>"},{"location":"#_3","title":"\u60c5\u5831\u6e90","text":"<p>\u516c\u5f0f\u306e\u60c5\u5831\u6e90\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002</p> <ul> <li>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>GitHub</li> </ul>"},{"location":"fastapi_intro/","title":"FastAPI\u3068\u306f\uff1f","text":"<p>FastAPI\u3068\u306f\u3001Python\u306e\u578b\u30d2\u30f3\u30c8\u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066Python3.6\u4ee5\u964d\u3067Web API\u3092\u958b\u767a\u3059\u308b\u305f\u3081\u306e\u9ad8\u901f\u306aWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3042\u308b\u3002</p> <p>FastAPI\u306e\u4e3b\u306a\u7279\u5fb4\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3002</p>"},{"location":"fastapi_intro/#_1","title":"\u9ad8\u901f\u6027","text":"<p>FastAPI\u306f\u975e\u5e38\u306b\u9ad8\u901f\u3060\u3002NodeJS\u3084\u3001\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u52a0\u901f\u306b\u5bfe\u5fdc\u3057\u305fNetty\u306e\u3088\u3046\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u540c\u7b49\u306e\u6027\u80fd\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001Starlette\uff08ASGI\uff09\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u4e0a\u3067\u52d5\u4f5c\u3057\u3001Pydantic\u3092\u30c7\u30fc\u30bf\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002</p>"},{"location":"fastapi_intro/#_2","title":"\u578b\u30d2\u30f3\u30c8\u3068\u81ea\u52d5\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":"<p>FastAPI\u3067\u306fPython\u306e\u578b\u30d2\u30f3\u30c8\u3092\u5229\u7528\u3057\u3066\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c7\u30fc\u30bf\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u751f\u6210\u304c\u81ea\u52d5\u3067\u884c\u308f\u308c\u307e\u3059\u3002</p>"},{"location":"fastapi_intro/#_3","title":"\u81ea\u52d5\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u751f\u6210","text":"<p>FastAPI\u306f\u3001OpenAPI\u3068ReDoc\u3092\u4f7f\u3063\u3066\u81ea\u52d5\u3067API\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u751f\u6210\u3067\u304d\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u958b\u767a\u8005\u306f\u624b\u52d5\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308b\u3002</p>"},{"location":"fastapi_intro/#_4","title":"\u7c21\u6f54\u306a\u30b3\u30fc\u30c9","text":"<p>FastAPI\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u578b\u30d2\u30f3\u30c8\u3068\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5229\u7528\u3057\u3066\u3001\u7c21\u6f54\u304b\u3064\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30b3\u30fc\u30c9\u306e\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u304c\u5bb9\u6613\u306b\u306a\u308b\u3002</p>"},{"location":"fastapi_intro/#_5","title":"\u975e\u540c\u671f\u51e6\u7406\u306e\u30b5\u30dd\u30fc\u30c8","text":"<p>Python\u306e<code>asyncio</code>\u3092\u5229\u7528\u3057\u3066\u3001\u975e\u540c\u671f\u51e6\u7406\u3092\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u3001I/O\u30d0\u30a6\u30f3\u30c9\u306a\u30bf\u30b9\u30af\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5411\u4e0a\u3059\u308b\u3002</p>"},{"location":"fastapi_intro/#_6","title":"\u4f9d\u5b58\u6027\u6ce8\u5165\u30b7\u30b9\u30c6\u30e0","text":"<p>FastAPI\u306b\u306f\u3001\u4f9d\u5b58\u6027\u6ce8\u5165\u30b7\u30b9\u30c6\u30e0\u304c\u7d44\u307f\u8fbc\u307e\u308c\u3066\u304a\u308a\u3001\u6a5f\u80fd\u306e\u518d\u5229\u7528\u3001\u30c6\u30b9\u30c8\u306e\u5bb9\u6613\u5316\u3001\u4f9d\u5b58\u95a2\u4fc2\u306e\u7ba1\u7406\u304c\u3067\u304d\u308b\u3002</p>"},{"location":"fastapi_intro/#_7","title":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3068\u8a8d\u8a3c","text":"<p>FastAPI\u306f\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3068\u8a8d\u8a3c\u306b\u95a2\u3059\u308b\u591a\u304f\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002OAuth2\u30d1\u30b9\u30ef\u30fc\u30c9\u30d5\u30ed\u30fc\u3068\u30b9\u30b3\u30fc\u30d7\u3092\u76f4\u63a5\u30b5\u30dd\u30fc\u30c8\u3057\u3001JWT\u30c8\u30fc\u30af\u30f3\u306e\u4f7f\u7528\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u3002</p>"},{"location":"fastapi_intro/#_8","title":"\u30c7\u30fc\u30bf\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":"<p>Pydantic\u3092\u4f7f\u7528\u3057\u3066\u3001\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3068\u30c7\u30fc\u30bf\u5909\u63db\u3092\u884c\u3046\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30e9\u30f3\u30bf\u30a4\u30e0\u30a8\u30e9\u30fc\u3092\u9632\u304e\u3001\u30c7\u30d0\u30c3\u30b0\u3092\u7c21\u5358\u306b\u3059\u308b\u3002</p> <p>\u3053\u308c\u3089\u306e\u7279\u5fb4\u306b\u3088\u308a\u3001FastAPI\u306fWeb API\u958b\u767a\u306b\u304a\u3044\u3066\u3001\u52b9\u7387\u7684\u304b\u3064\u52b9\u679c\u7684\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u8a00\u3048\u308b\u3060\u308d\u3046\u3002</p>"},{"location":"gql-api-tutorial/intro/","title":"FastAPI\u3067\u7c21\u5358\u306aGraphQL API\u3092\u3064\u304f\u308b","text":"<p>\u4eca\u56de\u306e\u30c8\u30d4\u30c3\u30af\u3067\u306f\u3001\u4e3b\u306b\u4ee5\u4e0b\u306e\u6280\u8853\u3092\u7528\u3044\u3066\u30e6\u30fc\u30b6\u540d\u3068\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u8868\u793a\u3059\u308bGraphQL API\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3092\u89e3\u8aac\u3059\u308b\u3002</p> <ul> <li>SQLite</li> <li>Strawberry</li> </ul>"},{"location":"gql-api-tutorial/intro/#strawberry","title":"Strawberry\u3068\u306f","text":"<p>Strawberry\u306f\u3001Python\u3067GraphQL API\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3002FastAPI\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u975e\u5e38\u306b\u52b9\u7387\u7684\u304b\u3064\u5f37\u529b\u306aAPI\u3092\u958b\u767a\u3067\u304d\u308b\u3002</p>"},{"location":"gql-api-tutorial/intro/#_1","title":"\u7279\u5fb4","text":"<ul> <li>\u578b\u5b89\u5168\uff1aPython\u306e\u578b\u30d2\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u3001\u578b\u5b89\u5168\u306aWeb API\u3092\u69cb\u7bc9\u3067\u304d\u308b\u3002</li> <li>\u30c7\u30b3\u30ec\u30fc\u30bf\uff1aResolver\u3084Mutation\u3092\u7c21\u5358\u306b\u5b9a\u7fa9\u3067\u304d\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u304c\u63d0\u4f9b\u3055\u308c\u308b\u3002</li> <li>\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\uff1aPython\u306e\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3001GraphQL\u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3002</li> </ul>"},{"location":"gql-api-tutorial/intro/#_2","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>import strawberry\n\n@strawberry.type\nclass User:\n    id: int\n    name: str\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self, info, id: int) -&gt; User:\n        return User(id=id, name=\"Example\")\n\nschema = strawberry.Schema(query=Query)\n</code></pre>"},{"location":"gql-api-tutorial/intro/#fastapi","title":"FastAPI\u3068\u306e\u7d44\u307f\u5408\u308f\u305b","text":"<p>FastAPI\u306e<code>add_graphql_route</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u3001Strawberry\u3067\u5b9a\u7fa9\u3057\u305f\u30b9\u30ad\u30fc\u30de\u3092FastAPI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u8ffd\u52a0\u3067\u304d\u308b\u3002</p> <pre><code>from fastapi import FastAPI\nfrom strawberry.fastapi import GraphQLRouter\n\napp = FastAPI()\napp.add_router(\"/graphql\", GraphQLRouter(schema=schema))\n</code></pre> <p>\u8a73\u7d30\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u307b\u3057\u3044\u3002</p>"},{"location":"gql-api-tutorial/intro/#_3","title":"\u624b\u9806","text":""},{"location":"gql-api-tutorial/intro/#1","title":"(1) \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","text":"<p>\u65b0\u3057\u304f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u3002</p> <pre><code>mkdir fastapi-graphql\ncd fastapi-graphql\n</code></pre>"},{"location":"gql-api-tutorial/intro/#2","title":"(2) \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5165\u529b\u3057\u3066\u3001\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002</p> <pre><code>pip install fastapi[all] uvicorn sqlite strawberry-graphql\n</code></pre>"},{"location":"gql-api-tutorial/intro/#3-mainpy","title":"(3) <code>main.py</code>\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210","text":"<pre><code># (1) \u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3084\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\nfrom typing import List\nfrom fastapi import FastAPI\nfrom strawberry.fastapi import GraphQLRouter\nimport strawberry\nfrom sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Session\n\n# (2) \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u8a2d\u5b9a\u3059\u308b\nDATABASE_URL = \"sqlite:///./test.db\"\n\n# (3) \u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\nBase = declarative_base()\n\n# (4) User\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, index=True)\n    email = Column(String, unique=True, index=True)\n\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n# (5) FastAPI\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\napp = FastAPI()\n\n# (6) User\u578b\u3092\u5b9a\u7fa9\u3059\u308b\n@strawberry.type\nclass UserType:\n    id: int\n    username: str\n    email: str\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def users(self, info) -&gt; List[UserType]:\n        db: Session = info.context[\"db\"]\n        return db.query(User).all()\n\n# (7) GraphQL\u30eb\u30fc\u30bf\u30fc\u3092\u8a2d\u5b9a\u3059\u308b\nrouter = GraphQLRouter(schema=strawberry.Schema(query=Query))\napp.include_router(router, route_path=\"/graphql\")\n\n# (8) \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3059\u308b\u95a2\u6570\u3092\u66f8\u304f\n@app.on_event(\"startup\")\nasync def startup_event():\n    Base.metadata.create_all(bind=engine)\n</code></pre>"},{"location":"gql-api-tutorial/intro/#4","title":"(4) \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3059\u308b","text":"<p>(3)\u3067\u8a18\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u3001SQLite\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3088\u3046\u3002</p> <pre><code>sqlite3 test.db\n</code></pre> <p>\u305d\u3057\u3066\u3001\u4ee5\u4e0b\u306eSQL\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066<code>users</code>\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002</p> <pre><code>CREATE TABLE users (\nid INTEGER PRIMARY KEY,\nusername TEXT NOT NULL,\nemail TEXT NOT NULL UNIQUE\n);\n</code></pre>"},{"location":"gql-api-tutorial/intro/#5","title":"(5) \u30b5\u30fc\u30d0\u306e\u8d77\u52d5","text":"<p>\u6700\u5f8c\u306b\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067FastAPI\u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3059\u308b\u3002</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>\u30d6\u30e9\u30a6\u30b6\u3067<code>http://127.0.0.1:8000/graphql</code>\u4e8c\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001GraphQL Playground\u304c\u8868\u793a\u3055\u308c\u3066GraphQL\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002</p>"},{"location":"gql-api-tutorial/intro/#_4","title":"\u5b9f\u969b\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u624b\u9806","text":""},{"location":"gql-api-tutorial/intro/#1-mutation","title":"(1) Mutation\u306e\u8ffd\u52a0","text":"<p>\u6700\u521d\u306b\u3001<code>main.py</code>\u306bMutation\u3092\u8ffd\u52a0\u3057\u3066\u65b0\u898f\u30e6\u30fc\u30b6\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u8ffd\u52a0\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002</p> <pre><code># ... (\u4ed6\u306e\u30a4\u30f3\u30dd\u30fc\u30c8)\nfrom sqlalchemy.exc import IntegrityError\n\n# ... (\u4ed6\u306e\u30b3\u30fc\u30c9)\n\n# (1) Mutation\u306e\u578b\u5b9a\u7fa9\u3092\u884c\u3046\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def create_user(self, info, username: str, email: str) -&gt; UserType:\n        db: Session = info.context[\"db\"]\n        user = User(username=username, email=email)\n        db.add(user)\n        try:\n            db.commit()\n        except IntegrityError:\n            db.rollback()\n            raise ValueError(\"User with this email already exists\")\n        return user\n\n# (2) GraphQL\u30eb\u30fc\u30bf\u30fc\u306e\u8a2d\u5b9a\u3092\u884c\u3046\nrouter = GraphQLRouter(schema=strawberry.Schema(query=Query, mutation=Mutation))\napp.include_router(router, route_path=\"/graphql\")\n\n# ... (\u4ed6\u306e\u30b3\u30fc\u30c9)\n</code></pre> <p>\u4e0a\u8ff0\u306e\u30b3\u30fc\u30c9\u306f<code>create_user</code>\u3068\u3044\u3046Mutation\u3092\u8ffd\u52a0\u3057\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u65b0\u3057\u3044\u30e6\u30fc\u30b6\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u8ffd\u52a0\u3067\u304d\u308b\u3002\u7279\u306b(1)\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u90e8\u5206\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u89e3\u8aac\u3059\u308b\u3002</p> <pre><code>@strawberry.type\nclass Mutation:\n    # \u30e1\u30bd\u30c3\u30c9\u304cGraphQL\u306eMutation\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u30c7\u30b3\u30ec\u30fc\u30bf\n    @strawberry.mutation\n    # \u4f59\u8ac7\uff1aPython\u3067\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u304d\u3001\u5fc5\u305a\u7b2c\u4e00\u5f15\u6570\u306bself\u3092\u7f6e\u304f\n    def create_user(self, info, username: str, email: str) -&gt; UserType:\n        db: Session = info.context[\"db\"]\n        # \u65b0\u3057\u3044\u30e6\u30fc\u30b6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\n        user = User(username=username, email=email)\n        db.add(user)\n        # \u3053\u306e\u90e8\u5206\u3092\u8a73\u7d30\u306b\u8aac\u660e\u3059\u308b\n        try:\n            db.commit()\n        except IntegrityError:\n            db.rollback()\n            raise ValueError(\"User with this email already exists\")\n        return user\n</code></pre> <p>\u7279\u306b\u3001\u4e0a\u8ff0\u306e\u30b3\u30fc\u30c9\u306b\u304a\u3051\u308b\u4ee5\u4e0b\u306e\u90e8\u5206\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u89e3\u8aac\u3059\u308b\u3002</p> <pre><code>try:\n    db.commit()\nexcept IntegrityError:\n    db.rollback()\n    raise ValueError(\"User with this email already exists\")\n</code></pre> <p>\u4e0a\u8ff0\u306f<code>try...except</code>\u69cb\u6587\u3092\u7528\u3044\u3066\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u63a5\u7d9a\u3059\u308b\u969b\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u969b\u306e\u5bfe\u51e6\u3092\u66f8\u3044\u3066\u3044\u308b\u3002\u3088\u308a\u5177\u4f53\u7684\u306b\u89e3\u8aac\u3059\u308b\u3068\u3001\u540c\u3058\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u6301\u3064\u30e6\u30fc\u30b6\u304c\u65e2\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u5834\u5408(<code>IntegrityError</code>)\u306b\u30ed\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u884c\u3044\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3059\u3002</p> <p>\u3053\u306e\u30b3\u30fc\u30c9\u3067\u3001GraphQL\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7d4c\u7531\u3057\u3066\u65b0\u3057\u3044\u30e6\u30fc\u30b6\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u8ffd\u52a0\u3067\u304d\u308b\u306e\u3060\u3002</p>"},{"location":"gql-api-tutorial/intro/#2_1","title":"(2) \u30b5\u30fc\u30d0\u306e\u518d\u8d77\u52d5","text":"<p>\u5909\u66f4\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u30b5\u30fc\u30d0\u3092\u518d\u8d77\u52d5\u3059\u308b\u3002</p> <pre><code>uvicorn main:app --reload\n</code></pre>"},{"location":"gql-api-tutorial/intro/#3-mutation","title":"(3) Mutation\u306e\u30c6\u30b9\u30c8","text":"<p>GraphQL Playground\u306b\u3066\u4ee5\u4e0b\u306eMutation\u3092\u5b9f\u884c\u3002\u65b0\u3057\u3044\u30e6\u30fc\u30b6\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u8ffd\u52a0\u3059\u308b\u3002</p> <pre><code>mutation {\n  createUser(username: \"john_doe\", email: \"john_doe@example.com\") {\n    id\n    username\n    email\n  }\n}\n</code></pre>"},{"location":"gql-api-tutorial/intro/#4-query","title":"(4) Query\u306e\u30c6\u30b9\u30c8","text":"<p>\u6700\u5f8c\u306b\u3001\u4ee5\u4e0b\u306eQuery\u3092\u5b9f\u884c\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u8ffd\u52a0\u3055\u308c\u305f\u30e6\u30fc\u30b6\u3092\u53d6\u5f97\u3059\u308b\u3002</p> <pre><code>{\n  users {\n    id\n    username\n    email\n  }\n}\n</code></pre> <p>\u3053\u308c\u3067SQLite\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u3001Query\u3084Mutation\u3092\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002</p>"},{"location":"rest-api-tutorial/intro/","title":"FastAPI\u3067Todo\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306eREST API\u3092\u4f5c\u308b","text":""},{"location":"rest-api-tutorial/intro/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u672c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001FastAPI\u3068SQLite\u3001SQLModel\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306aTodo\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306eREST API\u3092\u958b\u767a\u3059\u308b\u624b\u9806\u3092\u89e3\u8aac\u3059\u308b\u3002</p>"},{"location":"rest-api-tutorial/intro/#_2","title":"\u6280\u8853\u8aac\u660e","text":""},{"location":"rest-api-tutorial/intro/#sqlite","title":"SQLite","text":"<p>SQLite\u306f\u3001\u8efd\u91cf\u306a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3060\u3002\u6700\u5927\u306e\u7279\u5fb4\u306f\u30b5\u30fc\u30d0\u306e\u8a2d\u5b9a\u304c\u4e0d\u8981\u3067\u3042\u308b\u70b9\u3067\u3042\u308b\u3002\u5927\u62b5\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u306f\u3001\u5225\u9014\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u306a\u304f\u4f7f\u3048\u308b\u3002\u30c7\u30fc\u30bf\u306f\u4e00\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3055\u308c\u3001\u30c7\u30fc\u30bf\u306e\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u3084\u79fb\u884c\u304c\u7c21\u5358\u3060\u3002</p>"},{"location":"rest-api-tutorial/intro/#sqlmodel","title":"SQLModel","text":"<p>SQLModel\u306fPython\u306eORM\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b\u3002SQLModel\u3092\u4f7f\u3046\u3068\u3001Python\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u8868\u73fe\u3067\u304d\u308b\u3002</p>"},{"location":"rest-api-tutorial/intro/#swagger","title":"Swagger","text":"<p>Swagger\u306f\u3001OpenAPI Specification\u3092\u4f7f\u3063\u3066REST API\u3092\u8a2d\u8a08\u3059\u308b\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4e00\u90e8\u3060\u3002FastAPI\u3092\u4f7f\u3046\u3068\u3001Swagger UI\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u30c6\u30b9\u30c8\u30c4\u30fc\u30eb\u304c\u81ea\u52d5\u3067\u63d0\u4f9b\u3055\u308c\u308b\u3002\u3053\u308c\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u64cd\u4f5c\u3092\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u76f4\u63a5\u30c6\u30b9\u30c8\u3067\u304d\u3001API\u306e\u4ed5\u69d8\u3082\u7c21\u5358\u306b\u78ba\u8a8d\u3067\u304d\u308b\u3002</p>"},{"location":"rest-api-tutorial/intro/#_3","title":"\u624b\u9806","text":""},{"location":"rest-api-tutorial/intro/#1","title":"(1) \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p><code>myproject</code>\u30d5\u30a9\u30eb\u30c0\u3092\u65b0\u898f\u3067\u4f5c\u6210\u3059\u308b\u3002\u305d\u306e\u5f8c\u3001\u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u79fb\u52d5\u3057\u3066\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002</p> <pre><code>pip install fastapi[all] sqlmodel sqlite\n</code></pre>"},{"location":"rest-api-tutorial/intro/#2-db","title":"(2) DB\u8a2d\u5b9a","text":"<p><code>myproject</code>\u30d5\u30a9\u30eb\u30c0\u306e\u4e0b\u306b<code>app</code>\u30d5\u30a9\u30eb\u30c0\u3092\u66f8\u304d\u3001<code>database.py</code>\u3092\u65b0\u898f\u3067\u4f5c\u6210\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002</p> <p><code>/myproject/app/database.py</code></p> <pre><code># (1) \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092sqlmodel\u304b\u3089\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\nfrom sqlmodel import SQLModel, create_engine\n\n# (2) \u5909\u6570DATABASE_URL\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u4f4d\u7f6e\u3092\u8a2d\u5b9a\u3059\u308b\nDATABASE_URL = \"sqlite:///../main.db\"\n\n# (3) create_engine\u95a2\u6570\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u63a5\u7d9a\u30a8\u30f3\u30b8\u30f3\u3092\u4f5c\u6210\u3059\u308b\nengine = create_engine(DATABASE_URL)\n</code></pre>"},{"location":"rest-api-tutorial/intro/#3","title":"(3) \u30e2\u30c7\u30eb\u4f5c\u6210","text":"<p><code>/myproject/app/models.py</code>\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3001Todo\u30a2\u30a4\u30c6\u30e0\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002</p> <pre><code># (1) \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\nfrom typing import Optional\nfrom sqlmodel import SQLModel, Field\n\n# (2) Todo\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\nclass Todo(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    title: str\n    description: str\n    completed: bool\n</code></pre> <p>\u4e0a\u8ff0\u306e(2)\u306e\u30b3\u30fc\u30c9\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u89e3\u8aac\u3059\u308b\u3002</p> <pre><code>class Todo(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    title: str # str: \u6587\u5b57\u5217\u578b\n    description: str\n    completed: bool # bool: \u771f\u507d\u5024(true or false)\n</code></pre> <p>\u4e0a\u8ff0\u306e\u30e2\u30c7\u30eb\u3067\u306f\u3001\u30e6\u30fc\u30b6\u306f\u30bf\u30b9\u30af\u306e\u30bf\u30a4\u30c8\u30eb(<code>title</code>)\u3068\u8aac\u660e(<code>description</code>)\u3001\u5b8c\u4e86\u72b6\u614b(<code>completed</code>)\u3092SQLite\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3067\u304d\u308b\u3002\u4e00\u3064\u4e00\u3064\u306e\u30ab\u30e9\u30e0\u3092\u8aac\u660e\u3059\u308b\u3068\u5197\u9577\u306b\u306a\u308b\u306e\u3067\u3001\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u89e3\u8aac\u3092\u3059\u308b\u3002</p> <pre><code>id: Optional[int] = Field(default=None, primary_key=True)\n</code></pre> <p>\u4e0a\u8ff0\u306e\u5b9a\u7fa9\u3067\u3001<code>id</code>\u306f\u3044\u304f\u3064\u304b\u306e\u7279\u6027\u3092\u6301\u3063\u3066\u3044\u308b\u3002</p> <ul> <li><code>Optional[int]</code>\uff1a\u3053\u306e\u578b\u30d2\u30f3\u30c8\u306f\u3001<code>id</code>\u306e\u5024\u304c<code>int</code>\u3042\u308b\u3044\u306f<code>None</code>\u304b\u306e\u3044\u305a\u308c\u304b\u3092\u610f\u5473\u3059\u308b\u3002</li> <li><code>Field(default=None, primary_key=True)</code>\uff1a<code>id</code>\u304c\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3067\u3042\u308b\u3053\u3068\u3001\u305d\u3057\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u304c<code>None</code>\u3060\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u3002</li> </ul> <p>SQLite\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u5834\u5408\u3001\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3068\u3057\u3066\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u305d\u306e\u30c6\u30fc\u30d6\u30eb\u5185\u306e\u305d\u308c\u305e\u308c\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u4e00\u4f4d\u306b\u8b58\u5225\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3042\u308b\u3002\u307e\u305f\u3001SQLite\u3067\u306f\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u306e\u6574\u6570\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5bfe\u3057\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067<code>None</code>(\u3042\u308b\u3044\u306f<code>NULL</code>)\u304c\u6307\u5b9a\u3055\u308c\u308b\u3068\u3001SQLite\u306f\u81ea\u52d5\u7684\u306b\u305d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u4e00\u610f\u306e\u5024\u3092\u5272\u308a\u5f53\u3066\u308b\u3002</p>"},{"location":"rest-api-tutorial/intro/#4-fastapi","title":"(4) FastAPI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210","text":"<p><code>/myproject/app/main.py</code>\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3001FastAPI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3002</p> <pre><code># (1) \u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3001\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Session, select\nfrom .database import engine\nfrom .models import Todo\n\n# (2) FastAPI\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\napp = FastAPI()\n\n# (3) app.on_event\u95a2\u6570\u3067\u30c7\u30b3\u30ec\u30fc\u30bf\u3057\u3001API\u304c\u8d77\u52d5\u3059\u308b\u3068\u304d\u306b\u5b9f\u884c\u3055\u308c\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\n@app.on_event(\"startup\")\ndef on_startup():\n    with Session(engine) as session:\n        session.exec(select(Todo).where(Todo.id == 1))\n        session.commit()\n\n# (4)-1 \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9a\u7fa9\u3059\u308b \n@app.post(\"/todos/\", response_model=Todo)\ndef create_todo(todo: Todo):\n    with Session(engine) as session:\n        session.add(todo)\n        session.commit()\n        session.refresh(todo)\n        return todo\n\n# (4)-2 \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\n@app.get(\"/todos/\", response_model=list[Todo])\ndef read_todos():\n    with Session(engine) as session:\n        return session.exec(select(Todo)).all()\n\n# (4)-3 \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\n@app.get(\"/todos/{todo_id}\", response_model=Todo)\ndef read_todo(todo_id: int):\n    with Session(engine) as session:\n        todo = session.get(Todo, todo_id)\n        if not todo:\n            raise HTTPException(status_code=404, detail=\"Todo not found\")\n        return todo\n\n# (4)-4 \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\n@app.put(\"/todos/{todo_id}\", response_model=Todo)\ndef update_todo(todo_id: int, todo: Todo):\n    with Session(engine) as session:\n        db_todo = session.get(Todo, todo_id)\n        if not db_todo:\n            raise HTTPException(status_code=404, detail=\"Todo not found\")\n        todo_data = todo.dict(exclude_unset=True)\n        for key, value in todo_data.items():\n            setattr(db_todo, key, value)\n        session.add(db_todo)\n        session.commit()\n        session.refresh(db_todo)\n        return db_todo\n\n# (4)-5 \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\n@app.delete(\"/todos/{todo_id}\", response_model=Todo)\ndef delete_todo(todo_id: int):\n    with Session(engine) as session:\n        db_todo = session.get(Todo, todo_id)\n        if not db_todo:\n            raise HTTPException(status_code=404, detail=\"Todo not found\")\n        session.delete(db_todo)\n        session.commit()\n        return db_todo\n</code></pre> <p>\u4e0a\u8ff0\u306e\u30b3\u30fc\u30c9\u306f\u3001FastAPI\u3092\u7528\u3044\u3066RESTful API\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3042\u308b\u3002\u4e0a\u8ff0\u306e<code>main.py</code>\u306f\u975e\u5e38\u306b\u9577\u3044\u306e\u3067\u3001\u5404\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8(<code>GET</code>\u3001<code>POST</code>\u3001<code>PUT</code>\u3001<code>DELETE</code>)\u3092\u8ef8\u306b\u89e3\u8aac\u3092\u9032\u3081\u308b\u3002</p>"},{"location":"rest-api-tutorial/intro/#4","title":"(4)\u3067\u5b9f\u88c5\u3057\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u8aac\u660e","text":""},{"location":"rest-api-tutorial/intro/#post","title":"<code>POST</code>\u30e1\u30bd\u30c3\u30c9","text":"<p><pre><code>@app.post(\"/todos/\", response_model=Todo)\ndef create_todo(todo: Todo):\n    with Session(engine) as session:\n        session.add(todo)\n        session.commit()\n        session.refresh(todo)\n        return todo\n</code></pre> - <code>@app.post(\"/todos/\")</code>: POST\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002 - <code>response_model=Todo</code>: \u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u8fd4\u3059\u30e2\u30c7\u30eb\u306e\u5f62\u5f0f\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 - <code>todo: Todo</code>: \u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u304b\u3089<code>Todo</code>\u30e2\u30c7\u30eb\u306e\u5f62\u5f0f\u3067\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002 - <code>session.add(todo)</code>: \u65b0\u3057\u3044<code>Todo</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30bb\u30c3\u30b7\u30e7\u30f3\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002 - <code>session.commit()</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u5909\u66f4\u3092\u30b3\u30df\u30c3\u30c8\u3057\u307e\u3059\u3002 - <code>session.refresh(todo)</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u6700\u65b0\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3001<code>todo</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</p>"},{"location":"rest-api-tutorial/intro/#get","title":"<code>GET</code>\u30e1\u30bd\u30c3\u30c9","text":"<p><pre><code>@app.get(\"/todos/\", response_model=list[Todo])\ndef read_todos():\n    with Session(engine) as session:\n        return session.exec(select(Todo)).all()\n</code></pre> - <code>@app.get(\"/todos/\")</code>: GET\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002 - <code>response_model=list[Todo]</code>: \u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u8fd4\u3059\u30e2\u30c7\u30eb\u306e\u5f62\u5f0f\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f<code>Todo</code>\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u3044\u307e\u3059\u3002 - <code>session.exec(select(Todo)).all()</code>: \u3059\u3079\u3066\u306e<code>Todo</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u9078\u629e\u3057\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002</p>"},{"location":"rest-api-tutorial/intro/#gettodo","title":"<code>GET</code>\u30e1\u30bd\u30c3\u30c9(\u7279\u5b9a\u306eTodo\u3092\u53d6\u5f97\u3059\u308b)","text":"<p><pre><code>@app.get(\"/todos/{todo_id}\", response_model=Todo)\ndef read_todo(todo_id: int):\n    with Session(engine) as session:\n        todo = session.get(Todo, todo_id)\n        if not todo:\n            raise HTTPException(status_code=404, detail=\"Todo not found\")\n        return todo\n</code></pre> - <code>@app.get(\"/todos/{todo_id}\")</code>: \u7279\u5b9a\u306eID\u3092\u6301\u3064<code>Todo</code>\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002 - <code>todo_id: int</code>: URL\u304b\u3089<code>todo_id</code>\u3068\u3057\u3066\u6574\u6570\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002 - <code>session.get(Todo, todo_id)</code>: \u6307\u5b9a\u3055\u308c\u305fID\u3092\u6301\u3064<code>Todo</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3057\u307e\u3059\u3002 - <code>if not todo</code>: <code>Todo</code>\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001404\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</p>"},{"location":"rest-api-tutorial/intro/#put","title":"<code>PUT</code>\u30e1\u30bd\u30c3\u30c9","text":"<p><pre><code>@app.put(\"/todos/{todo_id}\", response_model=Todo)\ndef update_todo(todo_id: int, todo: Todo):\n    with Session(engine) as session:\n        db_todo = session.get(Todo, todo_id)\n        if not db_todo:\n            raise HTTPException(status_code=404, detail=\"Todo not found\")\n        todo_data = todo.dict(exclude_unset=True)\n        for key, value in todo_data.items():\n            setattr(db_todo, key, value)\n        session.add(db_todo)\n        session.commit()\n        session.refresh(db_todo)\n        return db_todo\n</code></pre> - <code>@app.put(\"/todos/{todo_id}\")</code>: \u7279\u5b9a\u306eID\u3092\u6301\u3064<code>Todo</code>\u3092\u66f4\u65b0\u3059\u308b\u305f\u3081\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002 - <code>todo: Todo</code>: \u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u304b\u3089\u66f4\u65b0\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002 - <code>db_todo = session.get(Todo, todo_id)</code>: \u6307\u5b9a\u3055\u308c\u305fID\u3092\u6301\u3064<code>Todo</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3057\u307e\u3059\u3002 - <code>todo_data = todo.dict(exclude_unset=True)</code>: \u672a\u8a2d\u5b9a\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u9664\u5916\u3057\u3066\u3001<code>todo</code>\u306e\u30c7\u30fc\u30bf\u3092\u8f9e\u66f8\u3068\u3057\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002 - <code>for key, value in todo_data.items()</code>: \u8f9e\u66f8\u306e\u5404\u30ad\u30fc\u3068\u5024\u3092\u30eb\u30fc\u30d7\u3057\u3066\u3001<code>db_todo</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5c5e\u6027\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</p>"},{"location":"rest-api-tutorial/intro/#delete","title":"<code>DELETE</code>\u30e1\u30bd\u30c3\u30c9","text":"<p><pre><code>@app.delete(\"/todos/{todo_id}\", response_model=Todo)\ndef delete_todo(todo_id: int):\n    with Session(engine) as session:\n        db_todo = session.get(Todo, todo_id)\n        if not db_todo:\n            raise HTTPException(status_code=404, detail=\"Todo not found\")\n        session.delete(db_todo)\n        session.commit()\n        return db_todo\n</code></pre> - <code>@app.delete(\"/todos/{todo_id}\")</code>: \u7279\u5b9a\u306eID\u3092\u6301\u3064<code>Todo</code>\u3092\u524a\u9664\u3059\u308b\u305f\u3081\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002 - <code>db_todo = session.get(Todo, todo_id)</code>: \u6307\u5b9a\u3055\u308c\u305fID\u3092\u6301\u3064<code>Todo</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3057\u307e\u3059\u3002 - <code>session.delete(db_todo)</code>: <code>db_todo</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u57fa\u672c\u7684\u306aCRUD\u64cd\u4f5c\u3092\u63d0\u4f9b\u3057\u3066\u304a\u308a\u3001\u30e6\u30fc\u30b6\u30fc\u306fAPI\u3092\u901a\u3058\u3066<code>Todo</code>\u30e2\u30c7\u30eb\u306e\u30c7\u30fc\u30bf\u3092\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"rest-api-tutorial/intro/#5","title":"(5) \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c","text":"<p>\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3001\u3044\u308f\u3086\u308b<code>/myproject</code>\u30d5\u30a9\u30eb\u30c0\u306b\u79fb\u52d5\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3059\u308b\u3002</p> <pre><code>uvicorn app.main:app --reload\n</code></pre> <p><code>http://127.0.0.1:8000</code>\u306bFastAPI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002\u3042\u3068\u3001<code>http://127.0.0.1:8000/docs</code>\u3067Swagger\u3092\u7d4c\u7531\u3057\u3066API\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u4f5c\u6210\u3067\u304d\u308b\u3002</p> <p>FastAPI\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067Swagger UI\u304c\u642d\u8f09\u3055\u308c\u3066\u304a\u308a\u3001\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u76f4\u63a5API\u3092\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3002Swagger UI\u3092\u4f7f\u3046\u3068\u3001\u305d\u308c\u305e\u308c\u306eAPI\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u8a73\u7d30\u3092\u78ba\u8a8d\u3057\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\u3057\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3002\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u5b9f\u969b\u306b\u30c6\u30b9\u30c8\u3067\u304d\u308b\u306e\u3060\u3002\u8a73\u7d30\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u307b\u3057\u3044\u3002</p>"},{"location":"rest-api-tutorial/intro/#_4","title":"\u6700\u7d42\u7684\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea","text":"<pre><code>/myproject\n    /app\n        __init__.py\n        main.py\n        models.py\n        database.py\n    main.db\n</code></pre>"}]}